{"ast":null,"code":"import \"viewerjs/dist/viewer.css\";\nimport Viewer from \"viewerjs\";\nimport { uploadFile } from \"@/api/index\";\nimport vuedraggable from \"vuedraggable\";\nexport default {\n  name: \"uploadPicThumb\",\n  components: {\n    vuedraggable\n  },\n  props: {\n    value: {\n      type: null\n    },\n    draggable: {\n      type: Boolean,\n      default: true\n    },\n    multiple: {\n      type: Boolean,\n      default: true\n    },\n    maxSize: {\n      type: Number,\n      default: 5\n    },\n    limit: {\n      type: Number,\n      default: 10\n    },\n    width: {\n      type: String,\n      default: \"60px\"\n    },\n    height: {\n      type: String,\n      default: \"60px\"\n    },\n    accept: {\n      type: String,\n      default: \".jpg, .jpeg, .png, .gif\"\n    }\n  },\n  computed: {\n    format() {\n      if (this.accept) {\n        let format = [];\n        this.accept.split(\",\").forEach(e => {\n          format.push(e.replace(\".\", \"\").replace(\" \", \"\"));\n        });\n        return format;\n      } else {\n        return [];\n      }\n    }\n  },\n  data() {\n    return {\n      accessToken: {},\n      uploadFileUrl: uploadFile,\n      uploadList: []\n    };\n  },\n  methods: {\n    onEnd() {\n      this.returnValue();\n    },\n    init() {\n      this.setData(this.value, true);\n      this.accessToken = {\n        accessToken: this.getStore(\"accessToken\")\n      };\n    },\n    handleView(v, i) {\n      let image = new Image();\n      image.src = v;\n      let viewer = new Viewer(image, {\n        hidden: function () {\n          viewer.destroy();\n        }\n      });\n      viewer.show();\n    },\n    handleRemove(file) {\n      const uploadList = this.uploadList;\n      this.uploadList.splice(uploadList.indexOf(file), 1);\n      this.returnValue();\n    },\n    handleSuccess(res, file) {\n      if (res.success) {\n        file.url = res.result;\n        // 单张图片处理\n        if (!this.multiple && this.uploadList.length > 0) {\n          // 删除第一张\n          this.uploadList.splice(0, 1);\n        }\n        this.uploadList.push(file);\n        // 返回组件值\n        this.returnValue();\n      } else {\n        this.$Message.error(res.message);\n      }\n    },\n    handleError(error, file, fileList) {\n      this.$Message.error(error.toString());\n    },\n    handleFormatError(file) {\n      this.$Notice.warning({\n        title: \"不支持的文件格式\",\n        desc: \"所选文件‘ \" + file.name + \" ’格式不正确, 请选择 \" + this.accept + \" 图片格式文件\"\n      });\n    },\n    handleMaxSize(file) {\n      this.$Notice.warning({\n        title: \"文件大小过大\",\n        desc: \"所选文件‘ \" + file.name + \" ’大小过大, 不得超过 \" + this.maxSize + \"M.\"\n      });\n    },\n    handleBeforeUpload() {\n      if (this.multiple && this.uploadList.length >= this.limit) {\n        this.$Message.warning(\"最多只能上传\" + this.limit + \"张图片\");\n        return false;\n      }\n      return true;\n    },\n    returnValue() {\n      if (!this.uploadList || this.uploadList.length < 1) {\n        if (!this.multiple) {\n          this.$emit(\"input\", \"\");\n          this.$emit(\"on-change\", \"\");\n        } else {\n          this.$emit(\"input\", []);\n          this.$emit(\"on-change\", []);\n        }\n        return;\n      }\n      if (!this.multiple) {\n        // 单张\n        let v = this.uploadList[0].url;\n        this.$emit(\"input\", v);\n        this.$emit(\"on-change\", v);\n      } else {\n        let v = [];\n        this.uploadList.forEach(e => {\n          v.push(e.url);\n        });\n        this.$emit(\"input\", v);\n        this.$emit(\"on-change\", v);\n      }\n    },\n    setData(v, init) {\n      if (typeof v == \"string\") {\n        // 单张\n        if (this.multiple) {\n          this.$Message.warning(\"多张上传仅支持数组数据类型\");\n          return;\n        }\n        if (!v) {\n          return;\n        }\n        this.uploadList = [];\n        let item = {\n          url: v,\n          status: \"finished\"\n        };\n        this.uploadList.push(item);\n        this.$emit(\"on-change\", v);\n      } else if (typeof v == \"object\") {\n        // 多张\n        if (!this.multiple) {\n          this.$Message.warning(\"单张上传仅支持字符串数据类型\");\n          return;\n        }\n        this.uploadList = [];\n        if (v.length > this.limit) {\n          for (let i = 0; i < this.limit; i++) {\n            let item = {\n              url: v[i],\n              status: \"finished\"\n            };\n            this.uploadList.push(item);\n          }\n          this.$emit(\"on-change\", v.slice(0, this.limit));\n          if (init) {\n            this.$emit(\"input\", v.slice(0, this.limit));\n          }\n          this.$Message.warning(\"最多只能上传\" + this.limit + \"张图片\");\n        } else {\n          v.forEach(e => {\n            let item = {\n              url: e,\n              status: \"finished\"\n            };\n            this.uploadList.push(item);\n          });\n          this.$emit(\"on-change\", v);\n        }\n      }\n    }\n  },\n  watch: {\n    value(val) {\n      this.setData(val);\n    }\n  },\n  mounted() {\n    this.init();\n  }\n};","map":{"version":3,"names":["Viewer","uploadFile","vuedraggable","name","components","props","value","type","draggable","Boolean","default","multiple","maxSize","Number","limit","width","String","height","accept","computed","format","split","forEach","e","push","replace","data","accessToken","uploadFileUrl","uploadList","methods","onEnd","returnValue","init","setData","getStore","handleView","v","i","image","Image","src","viewer","hidden","destroy","show","handleRemove","file","splice","indexOf","handleSuccess","res","success","url","result","length","$Message","error","message","handleError","fileList","toString","handleFormatError","$Notice","warning","title","desc","handleMaxSize","handleBeforeUpload","$emit","item","status","slice","watch","val","mounted"],"sources":["src/views/template/upload-pic-thumb.vue"],"sourcesContent":["<template>\r\n<div class=\"upload-thumb\">\r\n    <vuedraggable :list=\"uploadList\" :disabled=\"!draggable||!multiple\" :animation=\"200\" class=\"list-group\" ghost-class=\"thumb-ghost\" @end=\"onEnd\">\r\n        <div class=\"upload-list\" :style=\"{width: `calc(${width} + 2px)`, height: `calc(${height} + 2px)`, lineHeight: height}\" v-for=\"(item, index) in uploadList\" :key=\"index\">\r\n            <div v-if=\"item.status == 'finished'\">\r\n                <img :src=\"item.url\" :style=\"{height: height}\" />\r\n                <div class=\"upload-list-cover\">\r\n                    <Icon type=\"ios-eye-outline\" @click=\"handleView(item.url, index)\"></Icon>\r\n                    <Icon type=\"ios-trash-outline\" @click=\"handleRemove(item)\"></Icon>\r\n                </div>\r\n            </div>\r\n            <div v-else>\r\n                <Progress v-if=\"item.showProgress\" :percent=\"item.percentage\" hide-info></Progress>\r\n            </div>\r\n        </div>\r\n    </vuedraggable>\r\n    <Upload ref=\"upload\" :multiple=\"multiple\" :show-upload-list=\"false\" :on-success=\"handleSuccess\" :on-error=\"handleError\" :format=\"format\" :accept=\"accept\" :max-size=\"maxSize*1024\" :on-format-error=\"handleFormatError\" :on-exceeded-size=\"handleMaxSize\" :before-upload=\"handleBeforeUpload\" type=\"drag\" :action=\"uploadFileUrl\" :headers=\"accessToken\" class=\"upload-btn\" :style=\"{width: width}\">\r\n        <div class=\"upload-camera\" :style=\"{width: width, height: height, lineHeight: height}\">\r\n            <Icon type=\"md-camera\" size=\"20\"></Icon>\r\n        </div>\r\n    </Upload>\r\n</div>\r\n</template>\r\n\r\n<script>\r\nimport \"viewerjs/dist/viewer.css\";\r\nimport Viewer from \"viewerjs\";\r\nimport {\r\n    uploadFile\r\n} from \"@/api/index\";\r\nimport vuedraggable from \"vuedraggable\";\r\nexport default {\r\n    name: \"uploadPicThumb\",\r\n    components: {\r\n        vuedraggable\r\n    },\r\n    props: {\r\n        value: {\r\n            type: null\r\n        },\r\n        draggable: {\r\n            type: Boolean,\r\n            default: true\r\n        },\r\n        multiple: {\r\n            type: Boolean,\r\n            default: true\r\n        },\r\n        maxSize: {\r\n            type: Number,\r\n            default: 5\r\n        },\r\n        limit: {\r\n            type: Number,\r\n            default: 10\r\n        },\r\n        width: {\r\n            type: String,\r\n            default: \"60px\"\r\n        },\r\n        height: {\r\n            type: String,\r\n            default: \"60px\"\r\n        },\r\n        accept: {\r\n            type: String,\r\n            default: \".jpg, .jpeg, .png, .gif\"\r\n        }\r\n    },\r\n    computed: {\r\n        format() {\r\n            if (this.accept) {\r\n                let format = [];\r\n                this.accept.split(\",\").forEach(e => {\r\n                    format.push(e.replace(\".\", \"\").replace(\" \", \"\"));\r\n                });\r\n                return format;\r\n            } else {\r\n                return [];\r\n            }\r\n        }\r\n    },\r\n    data() {\r\n        return {\r\n            accessToken: {},\r\n            uploadFileUrl: uploadFile,\r\n            uploadList: []\r\n        };\r\n    },\r\n    methods: {\r\n        onEnd() {\r\n            this.returnValue();\r\n        },\r\n        init() {\r\n            this.setData(this.value, true);\r\n            this.accessToken = {\r\n                accessToken: this.getStore(\"accessToken\")\r\n            };\r\n        },\r\n        handleView(v, i) {\r\n            let image = new Image();\r\n            image.src = v;\r\n            let viewer = new Viewer(image, {\r\n                hidden: function () {\r\n                    viewer.destroy();\r\n                }\r\n            });\r\n            viewer.show();\r\n        },\r\n        handleRemove(file) {\r\n            const uploadList = this.uploadList;\r\n            this.uploadList.splice(uploadList.indexOf(file), 1);\r\n            this.returnValue();\r\n        },\r\n        handleSuccess(res, file) {\r\n            if (res.success) {\r\n                file.url = res.result;\r\n                // 单张图片处理\r\n                if (!this.multiple && this.uploadList.length > 0) {\r\n                    // 删除第一张\r\n                    this.uploadList.splice(0, 1);\r\n                }\r\n                this.uploadList.push(file);\r\n                // 返回组件值\r\n                this.returnValue();\r\n            } else {\r\n                this.$Message.error(res.message);\r\n            }\r\n        },\r\n        handleError(error, file, fileList) {\r\n            this.$Message.error(error.toString());\r\n        },\r\n        handleFormatError(file) {\r\n            this.$Notice.warning({\r\n                title: \"不支持的文件格式\",\r\n                desc: \"所选文件‘ \" +\r\n                    file.name +\r\n                    \" ’格式不正确, 请选择 \" +\r\n                    this.accept +\r\n                    \" 图片格式文件\"\r\n            });\r\n        },\r\n        handleMaxSize(file) {\r\n            this.$Notice.warning({\r\n                title: \"文件大小过大\",\r\n                desc: \"所选文件‘ \" +\r\n                    file.name +\r\n                    \" ’大小过大, 不得超过 \" +\r\n                    this.maxSize +\r\n                    \"M.\"\r\n            });\r\n        },\r\n        handleBeforeUpload() {\r\n            if (this.multiple && this.uploadList.length >= this.limit) {\r\n                this.$Message.warning(\"最多只能上传\" + this.limit + \"张图片\");\r\n                return false;\r\n            }\r\n            return true;\r\n        },\r\n        returnValue() {\r\n            if (!this.uploadList || this.uploadList.length < 1) {\r\n                if (!this.multiple) {\r\n                    this.$emit(\"input\", \"\");\r\n                    this.$emit(\"on-change\", \"\");\r\n                } else {\r\n                    this.$emit(\"input\", []);\r\n                    this.$emit(\"on-change\", []);\r\n                }\r\n                return;\r\n            }\r\n            if (!this.multiple) {\r\n                // 单张\r\n                let v = this.uploadList[0].url;\r\n                this.$emit(\"input\", v);\r\n                this.$emit(\"on-change\", v);\r\n            } else {\r\n                let v = [];\r\n                this.uploadList.forEach(e => {\r\n                    v.push(e.url);\r\n                });\r\n                this.$emit(\"input\", v);\r\n                this.$emit(\"on-change\", v);\r\n            }\r\n        },\r\n        setData(v, init) {\r\n            if (typeof v == \"string\") {\r\n                // 单张\r\n                if (this.multiple) {\r\n                    this.$Message.warning(\"多张上传仅支持数组数据类型\");\r\n                    return;\r\n                }\r\n                if (!v) {\r\n                    return;\r\n                }\r\n                this.uploadList = [];\r\n                let item = {\r\n                    url: v,\r\n                    status: \"finished\"\r\n                };\r\n                this.uploadList.push(item);\r\n                this.$emit(\"on-change\", v);\r\n            } else if (typeof v == \"object\") {\r\n                // 多张\r\n                if (!this.multiple) {\r\n                    this.$Message.warning(\"单张上传仅支持字符串数据类型\");\r\n                    return;\r\n                }\r\n                this.uploadList = [];\r\n                if (v.length > this.limit) {\r\n                    for (let i = 0; i < this.limit; i++) {\r\n                        let item = {\r\n                            url: v[i],\r\n                            status: \"finished\"\r\n                        };\r\n                        this.uploadList.push(item);\r\n                    }\r\n                    this.$emit(\"on-change\", v.slice(0, this.limit));\r\n                    if (init) {\r\n                        this.$emit(\"input\", v.slice(0, this.limit));\r\n                    }\r\n                    this.$Message.warning(\"最多只能上传\" + this.limit + \"张图片\");\r\n                } else {\r\n                    v.forEach(e => {\r\n                        let item = {\r\n                            url: e,\r\n                            status: \"finished\"\r\n                        };\r\n                        this.uploadList.push(item);\r\n                    });\r\n                    this.$emit(\"on-change\", v);\r\n                }\r\n            }\r\n        }\r\n    },\r\n    watch: {\r\n        value(val) {\r\n            this.setData(val);\r\n        }\r\n    },\r\n    mounted() {\r\n        this.init();\r\n    }\r\n};\r\n</script>\r\n\r\n<style lang=\"less\">\r\n.upload-thumb {\r\n    display: flex;\r\n    align-items: center;\r\n    flex-wrap: wrap;\r\n\r\n    .upload-list {\r\n        display: inline-block;\r\n        text-align: center;\r\n        border: 1px solid transparent;\r\n        border-radius: 4px;\r\n        overflow: hidden;\r\n        background: #fff;\r\n        position: relative;\r\n        box-shadow: 0 1px 1px rgba(0, 0, 0, 0.2);\r\n        margin-right: 8px;\r\n    }\r\n\r\n    .upload-list img {\r\n        object-fit: cover;\r\n    }\r\n\r\n    .upload-btn {\r\n        display: inline-block;\r\n    }\r\n\r\n    .upload-list-cover {\r\n        display: none;\r\n        position: absolute;\r\n        top: 0;\r\n        bottom: 0;\r\n        left: 0;\r\n        right: 0;\r\n        background: rgba(0, 0, 0, 0.6);\r\n    }\r\n\r\n    .upload-list:hover .upload-list-cover {\r\n        display: block;\r\n    }\r\n\r\n    .upload-list-cover i {\r\n        color: #fff;\r\n        font-size: 20px;\r\n        cursor: pointer;\r\n        margin: 0 2px;\r\n    }\r\n\r\n    .list-group {\r\n        display: inline-block;\r\n    }\r\n\r\n    .thumb-ghost {\r\n        opacity: 0.5;\r\n        background: #c8ebfb;\r\n    }\r\n}\r\n</style>\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}