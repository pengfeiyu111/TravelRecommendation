{"ast":null,"code":"/**\r\n * 用户名\r\n * @param rule 验证规则（不含特殊字符）\r\n * @param value 需要验证的值\r\n * @param callback 回调函数\r\n */\nexport const validateUsername = (rule, value, callback) => {\n  var reg = /^[a-zA-Z0-9_\\u4e00-\\u9fa5]{1,16}$/;\n  if (value.length > 16) {\n    callback(new Error('长度不能超过16个字符'));\n  } else if (!reg.test(value)) {\n    callback(new Error('仅支持大小写英文、中文和下划线_'));\n  } else {\n    callback();\n  }\n};\n\n/**\r\n * 密码格式验证\r\n * @param rule 验证规则（不少于6位）\r\n * @param value 需要验证的值\r\n * @param callback 回调函数\r\n */\nexport const validatePassword = (rule, value, callback) => {\n  if (value.length < 6) {\n    callback(new Error('密码长度不得小于6位'));\n  } else {\n    callback();\n  }\n};\n\n/**\r\n * 手机号码格式验证\r\n * @param rule 验证规则\r\n * @param value 需要验证的值\r\n * @param callback 回调函数\r\n */\nexport const validateMobile = (rule, value, callback) => {\n  var reg = /^[1][3,4,5,6,7,8,9][0-9]{9}$/;\n  if (!reg.test(value)) {\n    callback(new Error('手机号格式错误'));\n  } else {\n    callback();\n  }\n};\n\n/**\r\n * 身份证号码格式验证\r\n * @param rule 验证规则（是否满足18位）\r\n * @param value 需要验证的值\r\n * @param callback 回调函数\r\n */\nexport const validateIDCard = (rule, value, callback) => {\n  const reg = /^[1-9]\\d{5}(18|19|([23]\\d))\\d{2}((0[1-9])|(10|11|12))(([0-2][1-9])|10|20|30|31)\\d{3}[0-9Xx]$/;\n  if (!reg.test(value)) {\n    callback(new Error('身份证号码格式错误'));\n  } else {\n    callback();\n  }\n};","map":{"version":3,"names":["validateUsername","rule","value","callback","reg","length","Error","test","validatePassword","validateMobile","validateIDCard"],"sources":["D:/TravelRecommendation/front/src/libs/validate.js"],"sourcesContent":["/**\r\n * 用户名\r\n * @param rule 验证规则（不含特殊字符）\r\n * @param value 需要验证的值\r\n * @param callback 回调函数\r\n */\r\nexport const validateUsername = (rule, value, callback) => {\r\n  var reg = /^[a-zA-Z0-9_\\u4e00-\\u9fa5]{1,16}$/;\r\n  if (value.length > 16) {\r\n    callback(new Error('长度不能超过16个字符'));\r\n  } else if (!reg.test(value)) {\r\n    callback(new Error('仅支持大小写英文、中文和下划线_'));\r\n  } else {\r\n    callback();\r\n  }\r\n};\r\n\r\n/**\r\n * 密码格式验证\r\n * @param rule 验证规则（不少于6位）\r\n * @param value 需要验证的值\r\n * @param callback 回调函数\r\n */\r\nexport const validatePassword = (rule, value, callback) => {\r\n  if (value.length < 6) {\r\n    callback(new Error('密码长度不得小于6位'));\r\n  } else {\r\n    callback();\r\n  }\r\n};\r\n\r\n/**\r\n * 手机号码格式验证\r\n * @param rule 验证规则\r\n * @param value 需要验证的值\r\n * @param callback 回调函数\r\n */\r\nexport const validateMobile = (rule, value, callback) => {\r\n  var reg = /^[1][3,4,5,6,7,8,9][0-9]{9}$/;\r\n  if (!reg.test(value)) {\r\n    callback(new Error('手机号格式错误'));\r\n  } else {\r\n    callback();\r\n  }\r\n};\r\n\r\n/**\r\n * 身份证号码格式验证\r\n * @param rule 验证规则（是否满足18位）\r\n * @param value 需要验证的值\r\n * @param callback 回调函数\r\n */\r\nexport const validateIDCard = (rule, value, callback) => {\r\n  const reg = /^[1-9]\\d{5}(18|19|([23]\\d))\\d{2}((0[1-9])|(10|11|12))(([0-2][1-9])|10|20|30|31)\\d{3}[0-9Xx]$/;\r\n  if (!reg.test(value)) {\r\n    callback(new Error('身份证号码格式错误'));\r\n  } else {\r\n    callback();\r\n  }\r\n};"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMA,gBAAgB,GAAGA,CAACC,IAAI,EAAEC,KAAK,EAAEC,QAAQ,KAAK;EACzD,IAAIC,GAAG,GAAG,mCAAmC;EAC7C,IAAIF,KAAK,CAACG,MAAM,GAAG,EAAE,EAAE;IACrBF,QAAQ,CAAC,IAAIG,KAAK,CAAC,aAAa,CAAC,CAAC;EACpC,CAAC,MAAM,IAAI,CAACF,GAAG,CAACG,IAAI,CAACL,KAAK,CAAC,EAAE;IAC3BC,QAAQ,CAAC,IAAIG,KAAK,CAAC,kBAAkB,CAAC,CAAC;EACzC,CAAC,MAAM;IACLH,QAAQ,CAAC,CAAC;EACZ;AACF,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMK,gBAAgB,GAAGA,CAACP,IAAI,EAAEC,KAAK,EAAEC,QAAQ,KAAK;EACzD,IAAID,KAAK,CAACG,MAAM,GAAG,CAAC,EAAE;IACpBF,QAAQ,CAAC,IAAIG,KAAK,CAAC,YAAY,CAAC,CAAC;EACnC,CAAC,MAAM;IACLH,QAAQ,CAAC,CAAC;EACZ;AACF,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMM,cAAc,GAAGA,CAACR,IAAI,EAAEC,KAAK,EAAEC,QAAQ,KAAK;EACvD,IAAIC,GAAG,GAAG,8BAA8B;EACxC,IAAI,CAACA,GAAG,CAACG,IAAI,CAACL,KAAK,CAAC,EAAE;IACpBC,QAAQ,CAAC,IAAIG,KAAK,CAAC,SAAS,CAAC,CAAC;EAChC,CAAC,MAAM;IACLH,QAAQ,CAAC,CAAC;EACZ;AACF,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMO,cAAc,GAAGA,CAACT,IAAI,EAAEC,KAAK,EAAEC,QAAQ,KAAK;EACvD,MAAMC,GAAG,GAAG,8FAA8F;EAC1G,IAAI,CAACA,GAAG,CAACG,IAAI,CAACL,KAAK,CAAC,EAAE;IACpBC,QAAQ,CAAC,IAAIG,KAAK,CAAC,WAAW,CAAC,CAAC;EAClC,CAAC,MAAM;IACLH,QAAQ,CAAC,CAAC;EACZ;AACF,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}