{"ast":null,"code":"import XLSX from 'xlsx';\nfunction auto_width(ws, data) {\n  const colWidth = data.map(row => row.map(val => {\n    if (val == null) {\n      return {\n        'wch': 10\n      };\n    } else if (val.toString().charCodeAt(0) > 255) {\n      return {\n        'wch': val.toString().length * 2\n      };\n    } else {\n      return {\n        'wch': val.toString().length\n      };\n    }\n  }));\n  let result = colWidth[0];\n  for (let i = 1; i < colWidth.length; i++) {\n    for (let j = 0; j < colWidth[i].length; j++) {\n      if (result[j]['wch'] < colWidth[i][j]['wch']) {\n        result[j]['wch'] = colWidth[i][j]['wch'];\n      }\n    }\n  }\n  ws['!cols'] = result;\n}\nfunction json_to_array(key, jsonData) {\n  return jsonData.map(v => key.map(j => {\n    return v[j];\n  }));\n}\nfunction fixdata(data) {\n  let o = '';\n  let l = 0;\n  const w = 10240;\n  for (; l < data.byteLength / w; ++l) o += String.fromCharCode.apply(null, new Uint8Array(data.slice(l * w, l * w + w)));\n  o += String.fromCharCode.apply(null, new Uint8Array(data.slice(l * w)));\n  return o;\n}\nfunction get_header_row(sheet) {\n  const headers = [];\n  const range = XLSX.utils.decode_range(sheet['!ref']);\n  let C;\n  const R = range.s.r;\n  for (C = range.s.c; C <= range.e.c; ++C) {\n    var cell = sheet[XLSX.utils.encode_cell({\n      c: C,\n      r: R\n    })];\n    var hdr = 'UNKNOWN ' + C;\n    if (cell && cell.t) hdr = XLSX.utils.format_cell(cell);\n    headers.push(hdr);\n  }\n  return headers;\n}\nexport const export_table_to_excel = (id, filename) => {\n  const table = document.getElementById(id);\n  const wb = XLSX.utils.table_to_book(table);\n  XLSX.writeFile(wb, filename);\n};\nexport const export_json_to_excel = ({\n  data,\n  key,\n  title,\n  filename,\n  autoWidth\n}) => {\n  const wb = XLSX.utils.book_new();\n  data.unshift(title);\n  const ws = XLSX.utils.json_to_sheet(data, {\n    header: key,\n    skipHeader: true\n  });\n  if (autoWidth) {\n    const arr = json_to_array(key, data);\n    auto_width(ws, arr);\n  }\n  XLSX.utils.book_append_sheet(wb, ws, filename);\n  XLSX.writeFile(wb, filename + '.xlsx');\n};\nexport const export_array_to_excel = ({\n  key,\n  data,\n  title,\n  filename,\n  autoWidth\n}) => {\n  const wb = XLSX.utils.book_new();\n  const arr = json_to_array(key, data);\n  arr.unshift(title);\n  const ws = XLSX.utils.aoa_to_sheet(arr);\n  if (autoWidth) {\n    auto_width(ws, arr);\n  }\n  XLSX.utils.book_append_sheet(wb, ws, filename);\n  XLSX.writeFile(wb, filename + '.xlsx');\n};\nexport const read = (data, type) => {\n  const workbook = XLSX.read(data, {\n    type: type\n  });\n  const firstSheetName = workbook.SheetNames[0];\n  const worksheet = workbook.Sheets[firstSheetName];\n  const header = get_header_row(worksheet);\n  const results = XLSX.utils.sheet_to_json(worksheet);\n  return {\n    header,\n    results\n  };\n};\nexport default {\n  export_table_to_excel,\n  export_array_to_excel,\n  export_json_to_excel,\n  read\n};","map":{"version":3,"names":["XLSX","auto_width","ws","data","colWidth","map","row","val","toString","charCodeAt","length","result","i","j","json_to_array","key","jsonData","v","fixdata","o","l","w","byteLength","String","fromCharCode","apply","Uint8Array","slice","get_header_row","sheet","headers","range","utils","decode_range","C","R","s","r","c","e","cell","encode_cell","hdr","t","format_cell","push","export_table_to_excel","id","filename","table","document","getElementById","wb","table_to_book","writeFile","export_json_to_excel","title","autoWidth","book_new","unshift","json_to_sheet","header","skipHeader","arr","book_append_sheet","export_array_to_excel","aoa_to_sheet","read","type","workbook","firstSheetName","SheetNames","worksheet","Sheets","results","sheet_to_json"],"sources":["D:/TravelRecommendation/front/src/libs/excel.js"],"sourcesContent":["import XLSX from 'xlsx';\r\n\r\nfunction auto_width(ws, data){\r\n    const colWidth = data.map(row => row.map(val => {\r\n        if (val == null) {\r\n            return {'wch': 10};\r\n        }\r\n        else if (val.toString().charCodeAt(0) > 255) {\r\n            return {'wch': val.toString().length * 2};\r\n        } else {\r\n            return {'wch': val.toString().length};\r\n        }\r\n    }))\r\n    let result = colWidth[0];\r\n    for (let i = 1; i < colWidth.length; i++) {\r\n        for (let j = 0; j < colWidth[i].length; j++) {\r\n            if (result[j]['wch'] < colWidth[i][j]['wch']) {\r\n                result[j]['wch'] = colWidth[i][j]['wch'];\r\n            }\r\n        }\r\n    }\r\n    ws['!cols'] = result;\r\n}\r\n\r\nfunction json_to_array(key, jsonData){\r\n    return jsonData.map(v => key.map(j => { return v[j] }));\r\n}\r\n\r\nfunction fixdata(data) {\r\n    let o = ''\r\n    let l = 0\r\n    const w = 10240\r\n    for (; l < data.byteLength / w; ++l) o += String.fromCharCode.apply(null, new Uint8Array(data.slice(l * w, l * w + w)))\r\n    o += String.fromCharCode.apply(null, new Uint8Array(data.slice(l * w)))\r\n    return o\r\n}\r\n\r\nfunction get_header_row(sheet) {\r\n    const headers = []\r\n    const range = XLSX.utils.decode_range(sheet['!ref'])\r\n    let C\r\n    const R = range.s.r\r\n    for (C = range.s.c; C <= range.e.c; ++C) { \r\n        var cell = sheet[XLSX.utils.encode_cell({ c: C, r: R })] \r\n        var hdr = 'UNKNOWN ' + C \r\n        if (cell && cell.t) hdr = XLSX.utils.format_cell(cell)\r\n        headers.push(hdr)\r\n    }\r\n    return headers\r\n}\r\n\r\nexport const export_table_to_excel= (id, filename) => {\r\n    const table = document.getElementById(id);\r\n    const wb = XLSX.utils.table_to_book(table);\r\n    XLSX.writeFile(wb, filename);\r\n}\r\n\r\nexport const export_json_to_excel = ({data, key, title, filename, autoWidth}) => {\r\n    const wb = XLSX.utils.book_new();\r\n    data.unshift(title);\r\n    const ws = XLSX.utils.json_to_sheet(data, {header: key, skipHeader: true});\r\n    if(autoWidth){\r\n        const arr = json_to_array(key, data);\r\n        auto_width(ws, arr);\r\n    }\r\n    XLSX.utils.book_append_sheet(wb, ws, filename);\r\n    XLSX.writeFile(wb, filename + '.xlsx');\r\n}\r\n\r\nexport const export_array_to_excel = ({key, data, title, filename, autoWidth}) => {\r\n    const wb = XLSX.utils.book_new();\r\n    const arr = json_to_array(key, data);\r\n    arr.unshift(title);\r\n    const ws = XLSX.utils.aoa_to_sheet(arr);\r\n    if(autoWidth){\r\n        auto_width(ws, arr);\r\n    }\r\n    XLSX.utils.book_append_sheet(wb, ws, filename);\r\n    XLSX.writeFile(wb, filename + '.xlsx');\r\n}\r\n\r\nexport const read = (data, type) => {\r\n    const workbook = XLSX.read(data, { type: type });\r\n    const firstSheetName = workbook.SheetNames[0];\r\n    const worksheet = workbook.Sheets[firstSheetName];\r\n    const header = get_header_row(worksheet);\r\n    const results = XLSX.utils.sheet_to_json(worksheet);\r\n    return {header, results};\r\n}\r\n\r\nexport default {\r\n  export_table_to_excel,\r\n  export_array_to_excel,\r\n  export_json_to_excel,\r\n  read\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}