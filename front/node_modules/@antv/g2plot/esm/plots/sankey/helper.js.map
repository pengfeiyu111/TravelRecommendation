{"version":3,"file":"helper.js","sourceRoot":"","sources":["../../../src/plots/sankey/helper.ts"],"names":[],"mappings":";AAAA,OAAO,EAAE,YAAY,EAAE,IAAI,EAAE,MAAM,aAAa,CAAC;AACjD,OAAO,EAAE,2BAA2B,EAAE,MAAM,kBAAkB,CAAC;AAE/D,OAAO,EAAE,YAAY,EAAyB,MAAM,UAAU,CAAC;AAC/D,OAAO,EAAE,YAAY,EAAE,MAAM,UAAU,CAAC;AAGxC;;;;GAIG;AACH,SAAS,UAAU,CAAC,QAAgB;IAClC,OAAO,QAAQ,KAAK,WAAW,CAAC;AAClC,CAAC;AAED,MAAM,UAAU,iBAAiB,CAAC,SAAiB,EAAE,cAAsB,EAAE,KAAa;IACxF,OAAO,YAAY,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC,SAAS,GAAG,KAAK,CAAC,CAAC,CAAC,cAAc,CAAC;AACtE,CAAC;AAED,MAAM,UAAU,mBAAmB,CAAC,WAAmB,EAAE,gBAAwB,EAAE,MAAc;IAC/F,OAAO,YAAY,CAAC,WAAW,CAAC,CAAC,CAAC,CAAC,WAAW,GAAG,MAAM,CAAC,CAAC,CAAC,gBAAgB,CAAC;AAC7E,CAAC;AAED;;;;;GAKG;AACH,MAAM,UAAU,oBAAoB,CAAC,OAAsB,EAAE,KAAa,EAAE,MAAc;IAEtF,IAAA,QAAQ,GAaN,OAAO,SAbD,EACR,IAAI,GAYF,OAAO,KAZL,EACJ,WAAW,GAWT,OAAO,YAXE,EACX,WAAW,GAUT,OAAO,YAVE,EACX,WAAW,GAST,OAAO,YATE,EACX,SAAS,GAQP,OAAO,UARA,EACT,QAAQ,GAON,OAAO,SAPD,EACR,WAAW,GAMT,OAAO,YANE,EACX,gBAAgB,GAKd,OAAO,iBALO,EAChB,SAAS,GAIP,OAAO,UAJA,EACT,cAAc,GAGZ,OAAO,eAHK,EACd,SAAS,GAEP,OAAO,UAFA,EACT,KACE,OAAO,UADK,EAAd,SAAS,mBAAG,EAAE,KAAA,CACJ;IAEZ,IAAI,qBAA8B,CAAC;IAEnC,IAAI,CAAC,UAAU,CAAC,QAAQ,CAAC,EAAE;QACzB,qBAAqB,GAAG,2BAA2B,CACjD,YAAY,CAAC,IAAY,EAAE,WAAW,EAAE,WAAW,CAAC,EACpD,WAAW,EACX,WAAW,EACX,WAAW,EACX,SAAS,CACV,CAAC;KACH;SAAM;QACL,qBAAqB,GAAG,IAAI,CAAC;KAC9B;IAED,kBAAkB;IACZ,IAAA,KAAmB,YAAY,CACnC;QACE,SAAS,WAAA;QACT,WAAW,EAAE,mBAAmB,CAAC,WAAW,EAAE,gBAAgB,EAAE,MAAM,CAAC;QACvE,SAAS,EAAE,iBAAiB,CAAC,SAAS,EAAE,cAAc,EAAE,KAAK,CAAC;QAC9D,QAAQ,UAAA;QACR,SAAS,WAAA;KACV,EACD,qBAA8C,CAC/C,EATO,KAAK,WAAA,EAAE,KAAK,WASnB,CAAC;IAEF,YAAY;IACZ,OAAO;QACL,KAAK,EAAE,KAAK,CAAC,GAAG,CAAC,UAAC,IAAI;YACpB,6BACK,IAAI,CAAC,IAAI,kBAAG,GAAG,EAAE,GAAG,EAAE,MAAM,GAAK,SAAS,EAAE,KAC/C,MAAM,EAAE,IAAI,IACZ;QACJ,CAAC,CAAC;QACF,KAAK,EAAE,KAAK,CAAC,GAAG,CAAC,UAAC,IAAI;YACpB,2BACE,MAAM,EAAE,IAAI,CAAC,MAAM,CAAC,IAAI,EACxB,MAAM,EAAE,IAAI,CAAC,MAAM,CAAC,IAAI,EACxB,IAAI,EAAE,IAAI,CAAC,MAAM,CAAC,IAAI,IAAI,IAAI,CAAC,MAAM,CAAC,IAAI,IACvC,IAAI,CAAC,IAAI,kBAAG,GAAG,EAAE,GAAG,EAAE,OAAO,GAAK,SAAS,EAAE,KAChD,MAAM,EAAE,KAAK,IACb;QACJ,CAAC,CAAC;KACH,CAAC;AACJ,CAAC","sourcesContent":["import { isRealNumber, pick } from '../../utils';\nimport { transformDataToNodeLinkData } from '../../utils/data';\nimport { Data } from '../../types';\nimport { sankeyLayout, SankeyLayoutInputData } from './layout';\nimport { cutoffCircle } from './circle';\nimport { SankeyOptions } from './types';\n\n/**\n * 是否是 node-link 类型的数据结构\n * @param dataTyp\n * @returns\n */\nfunction isNodeLink(dataType: string) {\n  return dataType === 'node-link';\n}\n\nexport function getNodeWidthRatio(nodeWidth: number, nodeWidthRatio: number, width: number) {\n  return isRealNumber(nodeWidth) ? nodeWidth / width : nodeWidthRatio;\n}\n\nexport function getNodePaddingRatio(nodePadding: number, nodePaddingRatio: number, height: number) {\n  return isRealNumber(nodePadding) ? nodePadding / height : nodePaddingRatio;\n}\n\n/**\n * 将桑基图配置经过 layout，生成最终的 view 数据\n * @param options\n * @param width\n * @param height\n */\nexport function transformToViewsData(options: SankeyOptions, width: number, height: number) {\n  const {\n    dataType,\n    data,\n    sourceField,\n    targetField,\n    weightField,\n    nodeAlign,\n    nodeSort,\n    nodePadding,\n    nodePaddingRatio,\n    nodeWidth,\n    nodeWidthRatio,\n    nodeDepth,\n    rawFields = [],\n  } = options;\n\n  let sankeyLayoutInputData: unknown;\n\n  if (!isNodeLink(dataType)) {\n    sankeyLayoutInputData = transformDataToNodeLinkData(\n      cutoffCircle(data as Data, sourceField, targetField),\n      sourceField,\n      targetField,\n      weightField,\n      rawFields\n    );\n  } else {\n    sankeyLayoutInputData = data;\n  }\n\n  // 3. layout 之后的数据\n  const { nodes, links } = sankeyLayout(\n    {\n      nodeAlign,\n      nodePadding: getNodePaddingRatio(nodePadding, nodePaddingRatio, height),\n      nodeWidth: getNodeWidthRatio(nodeWidth, nodeWidthRatio, width),\n      nodeSort,\n      nodeDepth,\n    },\n    sankeyLayoutInputData as SankeyLayoutInputData\n  );\n\n  // 4. 生成绘图数据\n  return {\n    nodes: nodes.map((node) => {\n      return {\n        ...pick(node, ['x', 'y', 'name', ...rawFields]),\n        isNode: true,\n      };\n    }),\n    edges: links.map((link) => {\n      return {\n        source: link.source.name,\n        target: link.target.name,\n        name: link.source.name || link.target.name,\n        ...pick(link, ['x', 'y', 'value', ...rawFields]),\n        isNode: false,\n      };\n    }),\n  };\n}\n"]}